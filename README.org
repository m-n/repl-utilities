A set of utilities to make life at the repl easier.

Tested on SBCL and CCL, further porting should be trivial. 

Meant to be autoloaded and use-packaged by your lisps init file.

By far the most useful function in here is deflexical, taken from Rob Warnock
and aliased to lex. It defines a global lexical variable -- this lets you play
with test variables without needing to use earmuffs:

(defvar *x* (list 1 2 3)) ;; old, painful

(lex x (list 1 2 3)) ;; better

My next favorite of the bunch is readme, which prints the docstrings for the
exported symbols of a package.

 The rest of this files is generated by a call to readme:

(readme 'repl-utilities)

(doc func) > function
 Print any documentation for the symbol.
Use variable, function, structure, type, compiler macro, method combinationor, or setf.

(readme &optional (package *package*)) > function
 Print the documentation on the exported functions of a package.

(deflex var val &optional (doc nil docp)) > function
 Define a top level (global) lexical VAR with initial value VAL,
  which is assigned unconditionally as with DEFPARAMETER. If a DOC
  string is provided, it is attached to both the name |VAR| and the
  name *STORAGE-FOR-DEFLEX-VAR-|VAR|* as a documentation string of
  kind 'VARIABLE. The new VAR will have lexical scope and thus may be
  shadowed by LET bindings without affecting its dynamic (global) value.

(lex &rest args) > function
 Shortening of deflex: define a global lexical variable.

(add-advice symbol advice &optional afterp) > function
 Add an 'advice' function to be called on the arguments before or after
the symbol-function is called on them.

(dev package) > function
 Load the package, then swap to it. Import repl-utilities exported symbols that don't conflict.
For use at the repl. Mnemonic for develop.

(remove-advice &rest functions) > function
 Clear the advice from the given functions.

(arglist fname) > function
 Return the arglist for the given function name.
Implementations taken from slime.

(print-hash hash-table) > function
 Print the hash table as: Key, Value~% 

(trace-package &key (inheritedp nil)) > function
 Trace all of the symbols in *package*.
